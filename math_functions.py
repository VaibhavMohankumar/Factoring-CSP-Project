# Note: All docstrings in this file were generated by Codeium. 
# The rest of the code was written manually.
# Note: the above notes were generated by OpenAI's ChatGPT 4o

#setup
import math

a_value = 1
b_value = 2
c_value = 3
discriminant = 0


#functions
def validate_input(value):
    """
    Validates if the input value is an integer.
    
    Parameters:
        value: The value to be validated.
    
    Returns:
        boolean: True if the value is an integer, False otherwise.
    """
    try:
        int(value)
        return int(value)
    except ValueError:
        return False

def set_values(a,b,c):
    """
    Sets the values of a, b, and c for the quadratic equation ax^2 + bx + c = 0.
    
    Parameters:
        a (int): The value of a in the quadratic equation.
        b (int): The value of b in the quadratic equation.
        c (int): The value of c in the quadratic equation.
    """
    global a_value, b_value, c_value

    a_value = validate_input(a)
    b_value = validate_input(b)
    c_value = validate_input(c)

    if a_value is False or b_value is False or c_value is False:
        return "e"

def get_root_type():
    """
    Determines the type of roots for the quadratic equation ax^2 + bx + c = 0.
    
    Returns:
        str: "r" if the roots are real, "i" if the roots are imaginary.
    """
    global a_value, b_value, c_value, discriminant
    
    # Calculate the discriminant
    discriminant = math.pow(b_value, 2) - (4 * a_value * c_value)

    # Check if the discriminant is non-negative, meaning the roots are real
    if discriminant >= 0:
        return "r"
    else:
        # If the discriminant is negative, the roots are imaginary
        return "i"

def get_factors(number):
    """
    Returns:
        list: A list of all the factors of the given number.
    """
    # initialize the list of factors
    factors = []
    # loop through all the numbers from 1 to the absolute value of the number
    for i in range(1, abs(number) + 1):
        # if the number is divisible by i, then i and -i are factors
        if number % i == 0:
            # add i to the list of factors
            factors.append(i)
            # add -i to the list of factors
            factors.append(-i)
    # return the list of factors
    return factors

def quadratic_equation():
    
    """Solves the quadratic equation ax^2 + bx + c = 0 using the quadratic formula.
            Returns a list containing the two roots of the equation."""
    
    global a_value, b_value, c_value, discriminant
    final_roots = []
    
    # Calculate the discriminant (b^ - 4ac)
    discriminant = math.pow(b_value, 2) - (4 * a_value * c_value)
    
    # If the discriminant is negative, there are no real roots
    if get_root_type() == "i":
        return
    
    # Calculate the square root of the discriminant
    discriminant = math.sqrt(discriminant)

    # Calculate the two possible solutions using the quadratic formula
    equation_top_positive = (-b_value + discriminant)
    equation_top_negative = (-b_value - discriminant)

    final_root_positive = (equation_top_positive / (2 * a_value))
    final_root_negative = (equation_top_negative / (2 * a_value))
    
    # Append the roots to the list
    final_roots.append(final_root_positive)
    final_roots.append(final_root_negative)
    
    # Print and return the roots
    return final_roots

#foil
def calculate_foil(a, b, c, d):
    
    """ 
    Takes in 4 values and uses the FOIL method to calculate the coefficients of a quadratic equation and returns them in a list.
    """

    global a_value, b_value, c_value
    foil_values = []

    a_value = a * c
    foil_values.append(a_value)
    b_value = (a * d) + (c * b)
    foil_values.append(b_value)
    c_value = b * d
    foil_values.append(c_value)

    return foil_values